/// -*- mode: C++ -*-
///
/// @file __fmt
///
/// @author Kimball Thurston

//
// Copyright (c) 2012 Kimball Thurston
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

#pragma once

#include <tuple>
#include <locale>
#include <sstream>


namespace yaco
{

namespace __priv
{

template <typename charT, size_t I, size_t N>
struct fmt_arg : public fmt_arg<charT, I + 1, N - 1>
{
	typedef fmt_arg<charT, I + 1, N - 1> base;
	template <typename T>
	static void output( std::basic_ostream<charT> &os, size_t x, const T &args )
	{
		if ( x == I )
		{
			os << std::get<I>( args );
			return;
		}
		base::output( os, x, args );
	}
};

template <typename charT, size_t I>
struct fmt_arg<charT, I, 1>
{
	template <typename T>
	static void output( std::basic_ostream<charT> &os, size_t x, const T &args )
	{
		if ( x == I )
		{
			os << std::get<I>( args );
			return;
		}
		throw std::runtime_error( "Invalid fmt format string: out of range position indicator (missing arguments)" );
	}
};

template <typename charT, size_t I>
struct fmt_arg<charT, I, 0>
{
	template <typename T>
	static void output( std::basic_ostream<charT> &os, size_t x, const T &args )
	{
		throw std::runtime_error( "Invalid fmt format string: out of range position indicator (missing arguments)" );
	}
};

template <typename charT, typename fmtCharT, typename T>
void
fmt_build( std::basic_ostream<charT> &__os, const fmtCharT *__s, const T &__args )
{
	static const fmtCharT __fmtTag = std::char_traits<fmtCharT>::to_char_type( std::char_traits<char>::to_int_type( '%' ) );

	while ( *__s )
	{
		// how to do this properly??
		if ( std::char_traits<fmtCharT>::eq( *__s, __fmtTag ) )
		{
			++__s;
			typename std::char_traits<charT>::int_type __curC = std::char_traits<charT>::to_int_type( *__s );

			if ( ! std::isdigit( __curC ) )
				throw std::runtime_error( "Invalid fmt format string: expecting position indicator" );

			size_t __idx = 0;
			while ( __curC && std::isdigit( __curC ) )
			{
				__idx *= 10;
				__idx += ( __curC - std::char_traits<char>::to_int_type( '0' ) );
				++__s;
			}
			fmt_arg<charT, 0, std::tuple_size<T>::value>::output( __os, __idx, __args );
		}
		else
		{
			__os << *__s++;
		}
	}
}

} // namespace __priv

} // namespace yaco

